// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_S_URL")
}

model Comment {
  id        Int       @id @unique @default(autoincrement())
  desc      String?
  createdAt DateTime?
  userId    Int
  postId    Int
  user      User      @relation(fields: [userId], references: [id])
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model User {
  id                Int            @id @unique @default(autoincrement())
  username          String         @unique
  email             String         @unique
  password          String
  name              String
  coverPic          String?
  profilePic        String?
  city              String?
  website           String?
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  followedUsers     Relationship[] @relation("FollowedUsers")
  followers         Relationship[] @relation("Followers")
  story             Story[]
  giftToUser        Gift[]         @relation("GiftToUser")
  giftFromUser      Gift[]         @relation("GiftFromUser")
  messages          Message[]
  groupMembers      GroupMember[]
  notificationsTo   Notification[] @relation("EventToUser")
  notificationsFrom Notification[] @relation("EventFromUser")
}

model Post {
  id        Int       @id @unique @default(autoincrement())
  desc      String?
  img       String?
  createdAt DateTime?
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  comment   Comment[]
  likes     Like[]
}

model Like {
  id     Int  @id @unique @default(autoincrement())
  userId Int
  postId Int
  user   User @relation(fields: [userId], references: [id]) //ASK
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade) //ASK
}

model Relationship {
  id             Int  @id @unique @default(autoincrement())
  followedUser   User @relation("FollowedUsers", fields: [followedUserId], references: [id])
  followedUserId Int
  followerUser   User @relation("Followers", fields: [followerUserId], references: [id])
  followerUserId Int
}

model Story {
  id     Int    @id @unique @default(autoincrement())
  img    String
  user   User   @relation(fields: [userId], references: [id]) //ASK
  userId Int
}

model Notification {
  id         Int       @id @unique @default(autoincrement())
  createdAt  DateTime?
  eventText  String
  viewed     Boolean
  user       User      @relation("EventToUser", fields: [userId], references: [id])
  userId     Int
  fromUser   User?     @relation("EventFromUser", fields: [fromUserId], references: [id])
  fromUserId Int?
}

model Gift {
  id         Int       @id @unique @default(autoincrement())
  createdAt  DateTime?
  giftText   String
  user       User      @relation("GiftToUser", fields: [userId], references: [id])
  userId     Int
  gifter     User      @relation("GiftFromUser", fields: [gifterId], references: [id])
  gifterId   Int
  giftCard   GiftCard  @relation(fields: [giftCardId], references: [id])
  giftCardId Int
}

model GiftCard {
  id          Int    @id @unique @default(autoincrement())
  img         String
  name        String
  description String
  gifts       Gift[]
}

model MessageGroup {
  id          Int           @id @unique @default(autoincrement())
  name        String
  Message     Message[]
  GroupMember GroupMember[]
}

model Message {
  id       Int          @id @unique @default(autoincrement())
  message  String
  sendedAt DateTime
  user     User         @relation(fields: [userId], references: [id])
  userId   Int
  group    MessageGroup @relation(fields: [groupId], references: [id])
  groupId  Int
}

model GroupMember {
  id      Int          @id @unique @default(autoincrement())
  user    User         @relation(fields: [userId], references: [id])
  userId  Int
  group   MessageGroup @relation(fields: [groupId], references: [id])
  groupId Int
}
